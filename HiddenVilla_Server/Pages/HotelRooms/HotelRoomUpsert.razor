@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Models
@using Business.Repository.IRepository
@using HiddenVilla_Server.Service.IService
@inject IHotelRoomRepository HotelRoomRepository
@inject IHotelImagesRepository HotelImagesRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload


<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Room</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="HotelRoomModel" OnValidSubmit="HandleHotelRoomUpsert">
                    <DataAnnotationsValidator />
                    @*<ValidationSummary />*@
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="HotelRoomModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelRoomModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>HotelRoomModel.Occupancy"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>RegularRate</label>
                        <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>HotelRoomModel.RegularRate"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>SqFt</label>
                        <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Details</label>
                        <InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control"></InputTextArea>
                    </div>
                    <div class="form-group">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                        <div class="row">
                            @if (HotelRoomModel.ImageLinks!=null&& HotelRoomModel.ImageLinks.Count>0)
                            {
                                int serial = 1;
                                foreach (var roomImage in HotelRoomModel.ImageLinks)
                                {
                            <div class="col-md-2 mt-3">
                                <div class="room-image" style="background: url('@roomImage') 50% 50%;">
                                    <span class="room-image-title">@serial</span>
                                </div>
                                <button type="button" @onclick="()=>HapusFoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">
                                    Hapus
                                </button>
                            </div>
                                    
                                    serial++;
                                }
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Room</button>
                        <NavLink href="hotel-room" class="btn btn-secondary">Back to Index</NavLink>
                    </div>

                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
        [Parameter]
        public int? Id { get; set; }
    private HotelRoomDTO HotelRoomModel { get; set; } = new HotelRoomDTO();
    public HotelRoomImageDTO RoomImage { get; set; }
    private string Title { get; set; } = "Tambah";
    private List<string> NamaImageTerhapus { get; set; } = new List<string>();


    //GET
    protected override async Task OnInitializedAsync()
    {
        if (Id !=null)
        {
            //edit
            Title = "Rubah";
            HotelRoomModel = await HotelRoomRepository.GetHotelRoom(Id.Value);
            if (HotelRoomModel?.HotelRoomImages != null)
            {
                //ICOLLECTION LIST
                HotelRoomModel.ImageLinks = HotelRoomModel.HotelRoomImages.Select(i => i.RoomImageUrl).ToList();
            }
        }
        else
        {
            //create
            HotelRoomModel = new HotelRoomDTO();
        }
    }

    //POST
    private async Task HandleHotelRoomUpsert()
    {
        try
        {
            var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);
            if (roomDetailsByName != null)
            {
                //duplicate show error
                await JsRuntime.ToastrGagal("Ruangan sudah ada!");
                return;
            }
            if (HotelRoomModel.Id != 0 && Title == "Rubah")
            {
                //update
                var updateRoomResult = await HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
                if (HotelRoomModel.ImageLinks!=null && HotelRoomModel.ImageLinks.Any())
                {
                    if (NamaImageTerhapus!=null && NamaImageTerhapus.Any())
                    {
                        foreach (var namaImageTerhapus in NamaImageTerhapus)
                        {
                            var imageName = namaImageTerhapus.Replace($"RoomImages/", "");
                            var result = FileUpload.HapusFile(imageName);
                            await HotelImagesRepository.DeleteHotelImageByLink(namaImageTerhapus);
                            }
                        }

                        await TambahGambarRoom(updateRoomResult);
                    }
                    JsRuntime.ToastrSukses("Ruangan telah diedit :) ");
                }
                else
                {
                    //create

                    var createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
                    await TambahGambarRoom(createdResult);
                    JsRuntime.ToastrSukses("Ruangan telah dibuat :) ");
                }
            }
        catch (Exception ex)
        {

            //log exceptions
        }


        NavigationManager.NavigateTo("hotel-room");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0 )
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    //cek ekstensi
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await FileUpload.UnggahFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToastrGagal("Mohon pilih file .jpg/.jpeg/.png saja");
                        return;
                    }

                }
                if (images.Any())
                {
                    if (HotelRoomModel.ImageLinks!=null && HotelRoomModel.ImageLinks.Any())
                    {
                        HotelRoomModel.ImageLinks.AddRange(images);
                    }
                    else
                    {
                        HotelRoomModel.ImageLinks = new List<string>();
                        HotelRoomModel.ImageLinks.AddRange(images);
                    }

                }
                else
                {
                    await JsRuntime.ToastrGagal("Upload Ggambar gagal");
                    return;
                }
            }
        }
        catch (Exception ex)
        {

            await JsRuntime.ToastrGagal(ex.Message);
        }
    }

    private async Task TambahGambarRoom(HotelRoomDTO roomDetails)
    {
        foreach (var imageLink in HotelRoomModel.ImageLinks)
        {
            if (HotelRoomModel.HotelRoomImages==null || HotelRoomModel.HotelRoomImages.Where(x =>x.RoomImageUrl == imageLink).Count()==0)
            {
                RoomImage = new HotelRoomImageDTO()
                {
                    RoomId = roomDetails.Id,
                    RoomImageUrl = imageLink
                };
                await HotelImagesRepository.CreateHotelImage(RoomImage);
            }

        }
    }
    internal async Task HapusFoto(string ImageLink)
    {
        try
        {
            var imageIndex = HotelRoomModel.ImageLinks.FindIndex(x => x == ImageLink);
            var imageName = ImageLink.Replace($"RoomImages/", "");
            if (HotelRoomModel.Id==0 && Title == "Tambah")
            {
                var result = FileUpload.HapusFile(imageName);
            }
            else
            {
                //update
                NamaImageTerhapus ??= new List<string>();
                NamaImageTerhapus.Add(ImageLink);
            }
            HotelRoomModel.ImageLinks.RemoveAt(imageIndex);
        }
        catch (Exception ex)
        {

            await JsRuntime.ToastrGagal(ex.Message);
        }

    }
}
